% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sugar.R
\name{decorate}
\alias{decorate}
\title{Sugar function for decoration}
\usage{
decorate(object, decorator, exists = c("skip", "error", "overwrite"))
}
\arguments{
\item{object}{\verb{[R6::R6Class]} \cr R6 class to decorate.}

\item{decorator}{\verb{([DecorateClass]|character(1))} \cr
Decorator (or its name) to decorate with.}

\item{exists}{\verb{(character(1)} \cr Expected behaviour if method exists in
\code{object} and \code{decorator}. One of: 1. \code{exists = "error"} (default) - This
will throw an error and prevent the object being decorated.
2. \code{exists = "skip"} - This will decorate the object with all fields/methods
that don't already exist. 3. \code{exists = "overwrite"} - This will decorate
the object with all fields/methods from the decorator and overwrite ones
with the same name if they already exist.}
}
\description{
Simple wrapper around \code{decorator$new(object, exists)}
}
\examples{
library(R6)

## Define decorator
dec <- DecoratorClass("dec", public = list(goodbye = "Goodbye World"))

oop <- ooplah$new()
dec$goodbye
dec_oop <- decorate(oop, dec)
dec_oop$goodbye

## Equivalently
oop <- ooplah$new()
decorate(oop, "dec")

}
\seealso{
\link{DecoratorClass}
}
